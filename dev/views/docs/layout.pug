extends /master.pug
block content
	- var currentUrl = 'layout.html'
	section
		.container-fluid
			.row
				.col-md-12
					.row
						.col-lg-2.col-sm-3.pull-lg-9.pull-md-8
							//- SIDEBAR
							include ../includes/sidebar.pug
						.col-lg-10.col-sm-9.push-lg-3.push-md-4.theme-docs.code-bs
							h1 Bootstrap 4 components
							hr
							// Layout
							h4 Layout
								small 
									a(href='https://getbootstrap.com/docs/4.1/layout/overview/' target='_blank') (Official docs)
							h5 Overview
							p Components and options for laying out your Bootstrap project, including wrapping containers, a powerful grid system, a flexible media object, and responsive utility classes.
							.panel
								.panel-body
									h5 Containers
									p 
										| Containers are the most basic layout element in Bootstrap and are required when using our default grid system. Choose from a responsive, fixed-width container (meaning its 
										code max-width 
										| changes at each breakpoint) or fluid-width (meaning it’s 100% wide all the time).
										br
										| While containers can be nested, most layouts do not require a nested container.
									.bd-example-container
										.bd-example-container-header
										.bd-example-container-sidebar
										.bd-example-container-body

								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
											|   <span class="c">&lt;!-- Content here --&gt;</span>
											| <span class="nt">&lt;/div&gt;</span></code>

							.panel
								.panel-body
									p 
										| Use 
										code .container-fluid 
										| for a full width container, spanning the entire width of the viewport.
									.bd-example-container.bd-example-container-fluid
										.bd-example-container-header
										.bd-example-container-sidebar
										.bd-example-container-body

								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container-fluid"</span><span class="nt">&gt;</span>
											|   <span class="c">&lt;!-- Content here --&gt;</span>
											| <span class="nt">&lt;/div&gt;</span></code>
							.panel
								.panel-body
									h5 Responsive breakpoints
									p Since Bootstrap is developed to be mobile first, we use a handful of media queries to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.
									br
									p Bootstrap primarily uses the following media query ranges—or breakpoints—in our source Sass files for our layout, grid system, and components.

								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="c1">// Extra small devices (portrait phones, less than 576px)</span>
											| <span class="c1">// No media query for `xs` since this is the default in Bootstrap</span>
											br 
											| <span class="c1">// Small devices (landscape phones, 576px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">576px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Medium devices (tablets, 768px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">768px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Large devices (desktops, 992px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">992px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br 
											| <span class="c1">// Extra large devices (large desktops, 1200px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">1200px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span></code>
							p Since we write our source CSS in Sass, all our media queries are available via Sass mixins:
							.panel
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="c1">// No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) { ... }`</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-up</span><span class="p">(</span><span class="n">sm</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-up</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-up</span><span class="p">(</span><span class="n">lg</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-up</span><span class="p">(</span><span class="n">xl</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| 
											| <span class="c1">// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint</span>
											| <span class="nc">.custom-class</span> <span class="p">{</span>
											|   <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
											| <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-up</span><span class="p">(</span><span class="n">sm</span><span class="p">)</span> <span class="p">{</span>
											|   <span class="nc">.custom-class</span> <span class="p">{</span>
											|     <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
											|   <span class="p">}</span>
											| <span class="p">}</span>
								.panel-body
									p We occasionally use media queries that go in the other direction (the given screen size or smaller):
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="c1">// Extra small devices (portrait phones, less than 576px)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">575</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br 
											| <span class="c1">// Small devices (landscape phones, less than 768px)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">767</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br 
											| <span class="c1">// Medium devices (tablets, less than 992px)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">991</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br 
											| <span class="c1">// Large devices (desktops, less than 1200px)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">1199</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br 
											| <span class="c1">// Extra large devices (large desktops)</span>
											| <span class="c1">// No media query since the extra-large breakpoint has no upper bound on its width</span>
							.bd-callout.bd-callout-info
								p
									| Note that since browsers do not currently support 
									a(href='https://www.w3.org/TR/mediaqueries-4/#range-context') range context queries
									| , we work around the limitations of 
									a(href='https://www.w3.org/TR/mediaqueries-4/#mq-min-max')
										code.highlighter-rouge min-
										|  and 
										code.highlighter-rouge max-
										|  prefixes
									|  and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision for these comparisons.
							.panel
								.panel-body
									p Once again, these media queries are also available via Sass mixins:
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="k">@include</span> <span class="nd">media-breakpoint-down</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-down</span><span class="p">(</span><span class="n">sm</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-down</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-down</span><span class="p">(</span><span class="n">lg</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="c1">// No media query necessary for xl breakpoint as it has no upper bound on its width</span>
											| 
											| <span class="c1">// Example: Style from medium breakpoint and down</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-down</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span>
											|   <span class="nc">.custom-class</span> <span class="p">{</span>
											|     <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
											|   <span class="p">}</span>
											| <span class="p">}</span>

								.panel-body
									p There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="c1">// Extra small devices (portrait phones, less than 576px)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">575</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Small devices (landscape phones, 576px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">576px</span><span class="p">)</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">767</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Medium devices (tablets, 768px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">768px</span><span class="p">)</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">991</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Large devices (desktops, 992px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">992px</span><span class="p">)</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">1199</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											br
											| <span class="c1">// Extra large devices (large desktops, 1200px and up)</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">1200px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
								.panel-body
									p These media queries are also available via Sass mixins:
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="k">@include</span> <span class="nd">media-breakpoint-only</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-only</span><span class="p">(</span><span class="n">sm</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-only</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-only</span><span class="p">(</span><span class="n">lg</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
											| <span class="k">@include</span> <span class="nd">media-breakpoint-only</span><span class="p">(</span><span class="n">xl</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span></code>
								.panel-body
									p Similarly, media queries may span multiple breakpoint widths:
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="c1">// Example</span>
											| <span class="c1">// Apply styles starting from medium devices and up to extra large devices</span>
											| <span class="k">@media</span> <span class="p">(</span><span class="n">min-width</span><span class="o">:</span> <span class="m">768px</span><span class="p">)</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">1199</span><span class="mi">.98px</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
								.panel-body
									p The Sass mixin for targeting the same screen size range would be:
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="k">@include</span> <span class="nd">media-breakpoint-between</span><span class="p">(</span><span class="n">md</span><span class="o">,</span> <span class="n">xl</span><span class="p">)</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
								br
							h4 Z-index
							p 
								| Several Bootstrap components utilize z-index, the CSS property that helps control layout by providing a third axis to arrange content. We utilize a default z-index scale in Bootstrap that’s been designed to properly layer navigation, tooltips and popovers, modals, and more.
								br
								br
								| These higher values start at an arbitrary number, high and specific enough to ideally avoid conflicts. We need a standard set of these across our layered components—tooltips, popovers, navbars, dropdowns, modals—so we can be reasonably consistent in the behaviors. There’s no reason we couldn’t have used 100+ or 500+.
								br
								br
								| We don’t encourage customization of these individual values; should you change one, you likely need to change them all.
							.panel
								.panel-footer
									pre
										code.html.hljs.xml
											| <span class="nv">$zindex-dropdown</span><span class="p">:</span>          <span class="m">1000</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-sticky</span><span class="p">:</span>            <span class="m">1020</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-fixed</span><span class="p">:</span>             <span class="m">1030</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-modal-backdrop</span><span class="p">:</span>    <span class="m">1040</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-modal</span><span class="p">:</span>             <span class="m">1050</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-popover</span><span class="p">:</span>           <span class="m">1060</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
											| <span class="nv">$zindex-tooltip</span><span class="p">:</span>           <span class="m">1070</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span></code>

								
							p To handle overlapping borders within components (e.g., buttons and inputs in input groups), we use low single digit z-index values of 1, 2, and 3 for default, hover, and active states. On hover/focus/active, we bring a particular element to the forefront with a higher z-index value to show their border over the sibling elements.